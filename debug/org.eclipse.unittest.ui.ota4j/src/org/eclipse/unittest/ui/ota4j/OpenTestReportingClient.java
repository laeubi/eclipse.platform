/*******************************************************************************
 * Copyright (c) 2025 Eclipse contributors and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Eclipse contributors - initial API and implementation
 *******************************************************************************/
package org.eclipse.unittest.ui.ota4j;

import java.io.IOException;
import java.io.Reader;

import javax.xml.stream.XMLStreamException;

import org.eclipse.unittest.launcher.ITestRunnerClient;
import org.eclipse.unittest.model.ITestRunSession;

/**
 * A test runner client that reads Open Test Reporting events from a reader and
 * updates the test session.
 * <p>
 * This client can be used to integrate test frameworks that output OTA4J format
 * with the Eclipse Unit Test view.
 * </p>
 *
 * @since 1.0
 */
public class OpenTestReportingClient implements ITestRunnerClient {

	private final ITestRunSession fSession;
	private final Reader fEventReader;
	private Thread fReaderThread;
	private volatile boolean fStopped;

	/**
	 * Creates a new Open Test Reporting client.
	 *
	 * @param session     the test run session to update
	 * @param eventReader the reader providing the OTA4J event stream
	 */
	public OpenTestReportingClient(ITestRunSession session, Reader eventReader) {
		fSession = session;
		fEventReader = eventReader;
		fStopped = false;
	}

	@Override
	public void startMonitoring() {
		fReaderThread = new Thread("OTA4J Event Reader") { //$NON-NLS-1$
			@Override
			public void run() {
				try {
					OpenTestReportingReader reader = new OpenTestReportingReader(fSession);
					reader.readEvents(fEventReader);

					if (!fStopped) {
						fSession.notifyTestSessionCompleted(null);
					}
				} catch (IOException | XMLStreamException e) {
					if (!fStopped) {
						fSession.notifyTestSessionAborted(null, new Exception("Failed to read OTA4J events", e)); //$NON-NLS-1$
					}
				} finally {
					try {
						fEventReader.close();
					} catch (IOException e) {
						// Ignore close errors
					}
				}
			}
		};
		fReaderThread.start();
	}

	@Override
	public void stopTest() {
		fStopped = true;
		stopMonitoring();
	}

	@Override
	public void stopMonitoring() {
		if (fReaderThread != null && fReaderThread.isAlive()) {
			try {
				fEventReader.close();
			} catch (IOException e) {
				// Ignore close errors
			}
			fReaderThread.interrupt();
			try {
				fReaderThread.join(1000);
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
		}
	}
}
